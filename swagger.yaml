---
swagger: "2.0"
info:
  description: "x5 Api"
  version: "1.0.0"
  title: "x5 Api"
  contact:
    email: prokshina@artw.ru
host: virtserver.swaggerhub.com
basePath: /prokshina/x5api_front/1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
schemes:
- https
paths:
  /register:
    post:
      summary: registration
      description: register new user
      parameters:
      - name: name
        in: query
        description: user name
        required: true
        type: string
      - name: email
        in: query
        description: email, will be using as login
        required: true
        type: integer
        minimum: 0
        format: int32
      - name: password
        in: query
        required: true
        type: string
        maximum: 16
        minimum: 8
        format: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Users'
        "400":
          description: bad input parameter
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
      - default
      summary: authorization
      description: ""
      operationId: searchInventory
      produces:
      - application/json
      parameters:
      - name: email
        in: query
        required: true
        type: string
      - name: password
        in: query
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/Users'
        "400":
          description: bad input parameter
          schema:
            $ref: '#/definitions/Error'
  /user/get-info:
    get:
      tags:
      - default
      summary: get user info
      description: get current user info
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: user data
          schema:
            $ref: '#/definitions/Users'
        "400":
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: access denied
          schema:
            $ref: '#/definitions/Error'
  /user/logout:
    get:
      summary: logout
      parameters: []
      responses:
        "200":
          description: user data
          schema:
            $ref: '#/definitions/Success'
        "400":
          description: invalid input, object invalid
          schema:
            $ref: '#/definitions/Error'
  /spreadsheets:
    get:
      summary: get user's tables
      description: tables list
      parameters: []
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/Tables'
        "400":
          description: error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: add table
      description: add table
      parameters:
      - name: tableName
        in: query
        required: true
        type: string
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/TableAdd'
        "400":
          description: error
          schema:
            $ref: '#/definitions/Error'
  /spreadsheets/{id}:
    get:
      tags:
      - default
      summary: get table data
      description: ""
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/Table'
        "400":
          description: bad input parameter
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: edit table data
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - in: body
        name: tableData
        required: true
        schema:
          $ref: '#/definitions/TableInput'
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/Success'
        "400":
          description: bad input parameter
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete table
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/Success'
        "400":
          description: bad input parameter
          schema:
            $ref: '#/definitions/Error'
  /spreadsheets/name/{id}:
    put:
      tags:
      - default
      summary: change table name
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - name: tableName
        in: query
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/Success'
        "400":
          description: bad input parameter
          schema:
            $ref: '#/definitions/Error'
definitions:
  Users:
    type: object
    properties:
      status:
        type: string
        example: ok
      user:
        type: object
        properties:
          id:
            type: integer
            format: integer
            example: 1
          name:
            type: string
            example: Alexandra
          email:
            type: string
            example: test@site.ru
  Tables:
    type: object
    properties:
      status:
        type: string
        example: ok
      data:
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
              format: string
              example: 5f97025d528631001db3c2a4
            user_id:
              type: integer
              format: integer
              example: 1
            table_name:
              type: string
              example: Новое имя таблицы
            create_date:
              type: string
              example: Tue Oct 26 2020 08:38:41 GMT+0000 (Coordinated Universal Time)
            update_at:
              type: string
              example: Tue Oct 27 2020 09:38:41 GMT+0000 (Coordinated Universal Time)
  Table:
    type: object
    properties:
      status:
        type: string
        example: ok
      data:
        type: object
        properties:
          tableData:
            type: object
            properties:
              cols:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: integer
                    rowId:
                      type: integer
                      format: integer
                    value:
                      type: string
                      format: string
                      example: 1
          _id:
            type: string
            format: string
            example: 5f97025d528631001db3c2a4
          user_id:
            type: integer
            format: integer
            example: 1
          table_name:
            type: string
            example: Новое имя таблицы
          create_date:
            type: string
            example: Tue Oct 26 2020 08:38:41 GMT+0000 (Coordinated Universal Time)
          update_at:
            type: string
            example: Tue Oct 27 2020 09:38:41 GMT+0000 (Coordinated Universal Time)
  TableInput:
    type: object
    properties:
      tableData:
        type: object
        properties:
          cols:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: integer
                rowId:
                  type: integer
                  format: integer
                value:
                  type: string
                  example: 1
  TableAdd:
    type: object
    properties:
      status:
        type: string
        example: ok
      message:
        type: string
        example: ok
      data:
        type: object
        properties:
          _id:
            type: string
            example: 5f97025d528631001db3c2a4
  Error:
    type: object
    properties:
      status:
        type: string
        example: error
      error:
        type: string
        example: error text
  Success:
    type: object
    properties:
      status:
        type: string
        example: ok
      message:
        type: string
        example: ok
